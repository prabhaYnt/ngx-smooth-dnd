{
    "version": 3,
    "sources": [
        "ng://ngx-smooth-dnd/src/draggable/draggable.component.ts",
        "ng://ngx-smooth-dnd/src/container/container.component.ts",
        "ng://ngx-smooth-dnd/src/ngx-smooth-dnd.module.ts"
    ],
    "names": [
        "wrapperClass",
        "smoothDnd",
        "constants",
        "animationClass",
        "DraggableComponent",
        "_a",
        "prototype",
        "ngAfterViewInit",
        "this",
        "wrapper",
        "nativeElement",
        "parentNode",
        "className",
        "Component",
        "args",
        "selector",
        "template",
        "ViewChild",
        "smoothDnD",
        "dropHandler",
        "dropHandlers",
        "reactDropHandler",
        "handler",
        "wrapChild",
        "ContainerComponent",
        "_ngZone",
        "dragStart",
        "EventEmitter",
        "dragEnd",
        "drop",
        "dropReady",
        "dragEnter",
        "dragLeave",
        "container",
        "containerElementRef",
        "getOptions",
        "ngOnDestroy",
        "dispose",
        "_this",
        "options",
        "orientation",
        "behaviour",
        "groupName",
        "lockAxis",
        "dragHandleSelector",
        "nonDragAreaSelector",
        "dragBeginDelay",
        "animationDuration",
        "autoScrollEnabled",
        "dragClass",
        "dropClass",
        "dropPlaceholder",
        "onDragStart",
        "info",
        "getNgZone",
        "emit",
        "onDragEnd",
        "onDrop",
        "dropResult",
        "getChildPayload",
        "shouldAnimateDrop",
        "shouldAcceptDrop",
        "onDragEnter",
        "onDragLeave",
        "onDropReady",
        "getGhostParent",
        "clb",
        "run",
        "NgZone",
        "ContentChildren",
        "Input",
        "Output",
        "NgxSmoothDnDModule",
        "NgModule",
        "imports",
        "CommonModule",
        "declarations",
        "exports"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { constants } from 'smooth-dnd';\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst constantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'smooth-dnd-draggable',\r\n  templateUrl: './draggable.component.html'\r\n})\r\nexport class DraggableComponent implements AfterViewInit {\r\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\r\n  ngAfterViewInit() {\r\n    this.wrapper.nativeElement.parentNode.className = constants.wrapperClass;\r\n  }\r\n}\r\n",
        "import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, NgZone } from '@angular/core';\r\nimport { DraggableComponent } from '../draggable/draggable.component';\r\nimport { dropHandlers, smoothDnD, DropResult, ContainerOptions } from 'smooth-dnd';\r\n\r\nsmoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;\r\nsmoothDnD.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n  isSource: boolean;\r\n  payload: any;\r\n  willAcceptDrop: boolean;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"smooth-dnd-container\",\r\n  templateUrl: \"./container.component.html\"\r\n})\r\nexport class ContainerComponent implements AfterViewInit, OnDestroy {\r\n  private container: any;\r\n  @ContentChildren(DraggableComponent)\r\n  draggables: QueryList<DraggableComponent>;\r\n  @ViewChild(\"container\") containerElementRef: ElementRef;\r\n\r\n  @Input(\"orientation\") orientation;\r\n  @Input(\"behaviour\") behaviour;\r\n  @Input(\"groupName\") groupName;\r\n  @Input(\"lockAxis\") lockAxis;\r\n  @Input(\"dragHandleSelector\") dragHandleSelector;\r\n  @Input(\"nonDragAreaSelector\") nonDragAreaSelector;\r\n  @Input(\"dragBeginDelay\") dragBeginDelay;\r\n  @Input(\"animationDuration\") animationDuration;\r\n  @Input(\"autoScrollEnabled\") autoScrollEnabled;\r\n  @Input(\"dragClass\") dragClass;\r\n  @Input(\"dropClass\") dropClass;\r\n  @Input(\"dropPlaceholder\") dropPlaceholder;\r\n  @Input(\"removeOnDropOut\") removeOnDropOut;\r\n\r\n  @Output() dragStart = new EventEmitter<DragStartEndInfo>();\r\n  @Output() dragEnd = new EventEmitter<DragStartEndInfo>();\r\n  @Output() drop = new EventEmitter<DropResult>();\r\n  @Output() dropReady = new EventEmitter<DropResult>();\r\n  @Input() getChildPayload: (index: number) => {};\r\n  @Input()\r\n  shouldAnimateDrop: (\r\n    sourceContainerOptions: ContainerOptions,\r\n    payload: any\r\n  ) => boolean;\r\n  @Input()\r\n  shouldAcceptDrop: (\r\n    sourceContainerOptions: ContainerOptions,\r\n    payload: any\r\n  ) => boolean;\r\n  @Output() dragEnter = new EventEmitter();\r\n  @Output() dragLeave = new EventEmitter();\r\n\r\n  @Input()\r\n  getGhostParent: () => HTMLElement;\r\n\r\n  constructor(private _ngZone: NgZone) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.container = smoothDnD(\r\n      this.containerElementRef.nativeElement,\r\n      this.getOptions()\r\n    );\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.container.dispose();\r\n  }\r\n\r\n  private getOptions(): ContainerOptions {\r\n    const options: ContainerOptions = {};\r\n    if (this.orientation) options.orientation = this.orientation;\r\n    if (this.behaviour) options.behaviour = this.behaviour;\r\n    if (this.groupName) options.groupName = this.groupName;\r\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\r\n    if (this.dragHandleSelector)\r\n      options.dragHandleSelector = this.dragHandleSelector;\r\n    if (this.nonDragAreaSelector)\r\n      options.nonDragAreaSelector = this.nonDragAreaSelector;\r\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\r\n    if (this.animationDuration)\r\n      options.animationDuration = this.animationDuration;\r\n   \r\n      options.autoScrollEnabled = this.autoScrollEnabled;\r\n    if (this.dragClass) options.dragClass = this.dragClass;\r\n    if (this.dropClass) options.dropClass = this.dropClass;\r\n    if (this.dropPlaceholder) options.dropPlaceholder = this.dropPlaceholder;\r\n\r\n    if (this.dragStart)\r\n      options.onDragStart = (info: DragStartEndInfo) => {\r\n        this.getNgZone(() => {\r\n          this.dragStart.emit(info);\r\n        });\r\n      };\r\n\r\n    if (this.dragEnd)\r\n      options.onDragEnd = (info: DragStartEndInfo) => {\r\n        this.getNgZone(() => {\r\n          this.dragEnd.emit(info);\r\n        });\r\n      };\r\n\r\n    if (this.drop)\r\n      options.onDrop = (dropResult: DropResult) => {\r\n        this.getNgZone(() => {\r\n          this.drop.emit(dropResult);\r\n        });\r\n      };\r\n\r\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\r\n    if (this.shouldAnimateDrop)\r\n      options.shouldAnimateDrop = this.shouldAnimateDrop;\r\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\r\n\r\n    if (this.dragEnter)\r\n      options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\r\n    if (this.dragLeave)\r\n      options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\r\n\r\n    if (this.dropReady)\r\n      options.onDropReady = (dropResult: DropResult) => {\r\n        this.getNgZone(() => {\r\n          this.dropReady.emit(dropResult);\r\n        });\r\n      };\r\n    \r\n    if (this.getGhostParent) options.getGhostParent = this.getGhostParent;\r\n\r\n    return options;\r\n  }\r\n\r\n  private getNgZone(clb) {\r\n    this._ngZone.run(() => {\r\n      clb();\r\n    });\r\n  }\r\n}\r\n",
        "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './container/container.component';\r\nimport { DraggableComponent } from './draggable/draggable.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ContainerComponent, DraggableComponent],\r\n  exports: [ContainerComponent, DraggableComponent]\r\n})\r\nexport class NgxSmoothDnDModule {}\r\n"
    ]
}